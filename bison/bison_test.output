Terminals unused in grammar

    "break"
    "case"
    "char"
    "const"
    "continue"
    "default"
    "do"
    "double"
    "else"
    "enum"
    "extern"
    "float"
    "for"
    "goto"
    "if"
    "int"
    "long"
    "register"
    "return"
    "short"
    "signed"
    "sizeof"
    "static"
    "struct"
    "switch"
    "typedef"
    "union"
    "unsigned"
    "void"
    "volatile"
    "__Packed"
    "["
    "]"
    "{"
    "}"


Grammar

    0 $accept: program "end of input"

    1 program: "while" "(" expression ")" ";"

    2 expression: "letter"
    3           | "identifier"
    4           | "integer"


Terminals, with rules where they appear

    "end of input" (0) 0
    error (256)
    "identifier" <string> (258) 3
    "letter" <string> (259) 2
    "integer" <string> (260) 4
    "break" (261)
    "case" (262)
    "char" (263)
    "const" (264)
    "continue" (265)
    "default" (266)
    "do" (267)
    "double" (268)
    "else" (269)
    "enum" (270)
    "extern" (271)
    "float" (272)
    "for" (273)
    "goto" (274)
    "if" (275)
    "int" (276)
    "long" (277)
    "register" (278)
    "return" (279)
    "short" (280)
    "signed" (281)
    "sizeof" (282)
    "static" (283)
    "struct" (284)
    "switch" (285)
    "typedef" (286)
    "union" (287)
    "unsigned" (288)
    "void" (289)
    "volatile" (290)
    "while" (291) 1
    "__Packed" (292)
    "(" (293) 1
    ")" (294) 1
    "[" (295)
    "]" (296)
    "{" (297)
    "}" (298)
    ";" (299) 1


Nonterminals, with rules where they appear

    $accept (45)
        on left: 0
    program (46)
        on left: 1
        on right: 0
    expression (47)
        on left: 2 3 4
        on right: 1


State 0

    0 $accept: • program "end of input"

    "while"  shift, and go to state 1

    program  go to state 2


State 1

    1 program: "while" • "(" expression ")" ";"

    "("  shift, and go to state 3


State 2

    0 $accept: program • "end of input"

    "end of input"  shift, and go to state 4


State 3

    1 program: "while" "(" • expression ")" ";"

    "identifier"  shift, and go to state 5
    "letter"      shift, and go to state 6
    "integer"     shift, and go to state 7

    expression  go to state 8


State 4

    0 $accept: program "end of input" •

    $default  accept


State 5

    3 expression: "identifier" •

    $default  reduce using rule 3 (expression)


State 6

    2 expression: "letter" •

    $default  reduce using rule 2 (expression)


State 7

    4 expression: "integer" •

    $default  reduce using rule 4 (expression)


State 8

    1 program: "while" "(" expression • ")" ";"

    ")"  shift, and go to state 9


State 9

    1 program: "while" "(" expression ")" • ";"

    ";"  shift, and go to state 10


State 10

    1 program: "while" "(" expression ")" ";" •

    $default  reduce using rule 1 (program)
